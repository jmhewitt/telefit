% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.stPredict.R
\name{plot.stPredict}
\alias{plot.stPredict}
\title{Plot stPredict objects}
\usage{
\method{plot}{stPredict}(x, type = "prediction", t = NULL, stFit = NULL,
  stData = NULL, err.comparison = NULL, err.var = NULL,
  err.lab = err.var, pattern = 1, dots = NULL, burn = 1,
  signif.telecon = F, ...)
}
\arguments{
\item{x}{Object of class stPredict to plot.}

\item{type}{One of the following options to specify what type of plot to build
\describe{
  \item{prediction}{ Spatial plot of predicted response variable for 
    a given timepoint t. }
  \item{residual}{ Spatial plot of residual for a given timepoint t.  
    Note: this plot is only available if the model has been
    evaluated and the predictions have been compared to another response
    dataset. }
  \item{observed}{ Spatial plot of observed response variable for a given
    timepoint t. Note: this plot is only available if the model has been
    evaluated and the predictions have been compared to another response
    dataset.  }
  \item{standard_error (or 'se')}{ Spatial plot of prediction standard 
    errors for a given timepoint t.}
  \item{local}{ Spatial plot of the local components of the
    response variable for a given timepoint t.}
  \item{remote}{ Spatial plot of the remote components of the 
    response variable for a given timepoint t.}
  \item{w}{ Spatial plot of the spatial noise component of the reponse 
    variable for a given timepoint t.}
  \item{correlation}{ Scatterplot of observed vs. predicted response 
    variables for a given timepoint t.  Note: this plot is only available 
    if the model has been evaluated and the predictions have been compared 
    to another response dataset.   }
  \item{teleconnection}{ Spatial plot of remote coefficients associated
    with a location coord.s in the spatial response domain. }
  \item{teleconnection_knot}{ Spatial plot of remote knot coefficients 
    associated with a location coord.s in the spatial response domain. }
  \item{teleconnection_knot_transect}{ }
  \item{errors}{ Series of plots that measure overall prediction error 
    across prediction timepoints. }
  \item{cat.prediction}{ Spatial plot of the predicted response variable
    category (i.e., above/below average) for a given timepoint t. }
  \item{truth}{ Note: this plot is only available if the model has been
    evaluated and the predictions have been compared to another response
    dataset. }
  \item{residual}{ Note: this plot is only available if the model has been
    evaluated and the predictions have been compared to another response
    dataset. }
  \item{eof_alpha_knots}{ A map of the local domain where the plotted colors
    show the remote influence coefficients mapped onto the eof pattern
    specified by the "pattern" argument.   }
}}

\item{t}{timepoint to plot.  Will automatically plot the first timepoint if
t=NULL.}

\item{stFit}{Object of class stFit to provide related
information and structures for plotting estimated teleconnection effects}

\item{stData}{Object of class stData to provide coordinate and related
information for plotting estimated teleconnection effects}

\item{err.comparison}{data.frame with Year column  and a column for a variable
that will be used to plot annual errors against}

\item{err.var}{name of variable in err.comparison for plotting against}

\item{err.lab}{label for name of variable in err.comparison for plotting against}

\item{pattern}{if type=='eof_alpha_knots', this specified which eof the remote 
coefficients should be mapped onto and then plotted over the local domain}

\item{dots}{additional named arguments with defaults to pass to additional 
functions}

\item{burn}{number of observations to exclude from graph}

\item{signif.telecon}{TRUE to highlight significant teleconnection effects}

\item{...}{additional arguments to be passed to lower-level plotting functions}
}
\value{
a ggplot object with the specified map
}
\description{
This function provides basic plotting for telefit package data.
}
\examples{
\dontrun{
  
# demonstration of core methods for working with the remote effects 
# spatial proces (RESP) model. 
#  
# while this example may take several minutes to run, it only demonstrates use 
# of the model fitting and evaluation functions.  the demonstration does not 
# draw enough posterior samples to be able to conduct inference.

set.seed(2018)
  
library(dplyr)
library(foreach)
library(itertools)

data("coprecip")
attach(coprecip)

# specify prior distributions
priors = list(
  beta = list( Lambda = diag(10, ncol(X[,,1]))), 
  cov.s = list( smoothness = .5, range = c(1, 600), variance = c(2, 30), 
                nugget = c(2, 1) ),
  cov.r = list( smoothness = .5, range = c(1, 600), variance = c(2,1e-1), 
                nugget = c(2,1) )
)


#
# place nearly equally-spaced knots over the remote covariates
#

n.lon = 7
n.lat = 6

lon.unique = unique(coords.r[,1])
lon.range = (180-min(lon.unique[lon.unique>0])) + 
  max(lon.unique[lon.unique<0]) + 180
lon.step = lon.range/(n.lon-1)

lat.unique = unique(coords.r[,2])
lat.range = max(lat.unique[lat.unique>0]) - min(lat.unique[lat.unique<0])
lat.step = lat.range/(n.lat-1)

coords.ideal = expand.grid(
  lon = seq(from = min(lon.unique[lon.unique>0]),
            by = lon.step, length.out = n.lon),
  lat = seq(from = max(lat.unique[lat.unique>0]),
            by = -lat.step, length.out = n.lat)) \%>\%
  mutate(lon = ifelse(lon>180, lon - 360, lon))

# map ideal knot coordinates to closest available coordinates in data
coords.knots = foreach(r = iter(coords.ideal, by = 'row'), 
                       .combine = 'rbind') \%do\% {
  coords.r[which.min(fields::rdist.earth(r, coords.r)),]
}
# remove duplicate knots
coords.knots = unique(coords.knots)
rownames(coords.knots) = NULL


# configure sampler
maxIt = 100
burn = 10

# fit RESP model (run sampler)
fit = stFit(stData = coprecip, priors = priors, maxIt = maxIt,
            coords.knots = coords.knots)

# fit is a stFit object
class(fit)

# extract posterior means and HPD intervals for model parameters
ests = coef(fit, burn = burn)
HPDinterval.stFit(fit, burn = burn)

# graph posterior distributions and traceplots
plot(fit, burn = burn)
plot(fit, type='trace')

# compute a profile likelihood for covariance parameters
sseq = seq(.1, .7, length.out = 15)
rseq = seq(100, 300, length.out = 15)
seqs = expand.grid(sigmasq_y = sseq, rho_y = rseq)
n = nrow(seqs)
ll = stLL(stData = coprecip, stFit = fit, 
          beta = matrix(ests$beta, nrow = n, ncol = 2, byrow = T), 
          sigmasq_y = seqs$sigmasq_y, sigmasq_r = rep(ests$sigmasq_r, n), 
          sigmasq_eps = rep(ests$sigmasq_eps, n),
          rho_y = seqs$rho_y, rho_r = rep(ests$rho_r, n), 
          sigmasq_r_eps = rep(0, n))

# plot the profile likelihood
contour(sseq, rseq, matrix(ll, length(sseq), length(rseq)), 
        xlab = expression(sigma[w]^2), ylab = expression(rho[w]))

# compute VIFs
stVIF(stData = coprecip, stFit = fit, burn = burn)

# sample posterior predictive distributions AND estimate teleconnection effects
fcst = stPredict(stFit = fit, stData = coprecip, stDataNew = coprecip, 
                 burn = burn, returnFullAlphas = TRUE)

# fcst is a stPredict object
class(fcst)

# evaluate posterior predictions (includes Brier skill against climatology)
clim = rowMeans(Y)
fcst = stEval(fcst, Y, clim)

# quickly look at fit summaries
summary(fcst)

# view posterior predictions for 1982
plot(fcst, burn = burn, t = 1982)
plot(fcst, burn = burn, t = 1982, type = 'se')
plot(fcst, burn = burn, t = 1982, type = 'cat.pred')
  
# extract posterior means for estimates of EOF teleconnection effects
alpha.eof = coef(fcst, stData = coprecip, stFit = fit, burn = burn) 

# recompute approximate 90\% credible intervals for teleconnection effects
alpha.90 = summariseAlpha(alpha = fcst$alpha, prob = .9, 
                          coords.s = coords.s, coords.r = coords.r)
alpha.eof.90 = summariseEOFAlpha(eof_alpha = fcst$eof_alpha_knots, prob = .9,
                                 coords.s = coords.s)

# view posterior means for the ENSO effect on Colorado precipitation
fields::quilt.plot(coords.s, alpha.eof[,1])

# alternatively, plot.stPredict can do this as well, but can also use the 
# uncertainty estimates to highlight locations with significant effects
plot(fcst, type='eof_alpha_knots', stFit = fit, stData = coprecip,
     signif.telecon = TRUE, lwd=0.7, alpha=.6)

# compare with significance using 90\% intervals
alpha.eof.95 = fcst$eof_alpha_knots
fcst$eof_alpha_knots = alpha.eof.90
plot(fcst, type='eof_alpha_knots', stFit = fit, stData = coprecip,
     signif.telecon = TRUE, lwd=0.7, alpha=.6)


# simulate new responses using covariates and the estimated model parameters
cosim = stSimulate(coprecip, coprecip, coords.knots, 
                   params = list(
                     beta = ests$beta,
                     cov.s = list(smoothness = priors$cov.s$smoothness,
                                  range = ests$rho_y, 
                                  variance = ests$sigmasq_r,
                                  nugget = ests$sigmasq_r_eps),
                     cov.r = list(smoothness = priors$cov.r$smoothness,
                                  range = ests$rho_r,
                                  variance = ests$sigmasq_r,
                                  nugget = 0)
                   ))

# view some of the simulated data
plot(cosim$dat.sim.train, t = 1982)

# simulation output includes simulated teleconnection effects
str(cosim$params$alphaKnots)
str(cosim$params$alpha)

}
}
